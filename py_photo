# For reading images.
import cv2
from ultralytics import YOLO

import os

license_model = YOLO('models/runs/detect/train3/weights/best.pt')
# read video
# cap = cv2.VideoCapture(0)
cap = 'testing/download.jpg'



output_dir = 'output_license'
os.makedirs(output_dir, exist_ok=True)

frame = cv2.imread(cap)

desired_width = 640
desired_height = 480
frame_resized = cv2.resize(frame, (desired_width, desired_height))


license_plate_detection = license_model.track(frame,persist=True)
# print(license_plate_detection)
if license_plate_detection:
            counter = 0
            for  license_plate in license_plate_detection[0].boxes.data.tolist():
                # print(license_plate) 
                x1, y1, x2, y2, class_id, score, _ = license_plate

                #license plate crop
                plate_crop = frame[int(y1): int(y2), int(x1): int(x2)]

            
                # process license plate
                plate_crop_gray = cv2.cvtColor(plate_crop, cv2.COLOR_BGR2GRAY)
                plate_crop_thresh_inv = cv2.adaptiveThreshold(plate_crop_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 13, 3)

                contours, hierarchy = cv2.findContours(plate_crop_thresh_inv, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
                # cv2.drawContours(plate_crop_thresh_inv, contours, -1, (0,255,0), 3)

                char_box =[]
                min_char_area = 300
                for contour in contours:
                    x, y, w, h = cv2.boundingRect(contour)
                    # print("printing contours",x, y, w, h)
                    if w * h > min_char_area:
                        char_box.append((x, y, w, h))
                        cv2.rectangle(frame, (x + int(x1), y + int(y1)), (x + int(x1) + w, y + int(y1) + h), (0, 255, 0), 2)

                for char_idx, (x, y, w, h) in enumerate(char_box):
                    char_image = plate_crop_thresh_inv[y:y+h, x:x+w]
                    if char_image.size > 0:  # Check if the image is not empty
                        counter = counter + 1
                        output_filename = os.path.join(output_dir, f'char_{counter}.jpg')
                        cv2.imwrite(output_filename, char_image)

                
                license_frame = license_plate_detection[0].plot()

# cv2.imshow("License plate", license_frame) #License plate
cv2.imshow("Boxes", frame) #License plate
cv2.waitKey(0)
cv2.destroyAllWindows()