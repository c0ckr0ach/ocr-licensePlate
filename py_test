# For reading video feeds.
import cv2
import numpy as np
from ultralytics import YOLO
from sort.sort import *
# from util import *
import os

license_model = YOLO('models/runs/detect/train3/weights/best.pt')
# read video
cap = cv2.VideoCapture(0)

mot_tracker = Sort()
counter = 0

output_dir = 'output_license'
os.makedirs(output_dir, exist_ok=True)

while cap.isOpened():
    success, frame = cap.read()
    if success:
        license_plate_detection = license_model.track(frame,persist=True)
        # print(license_plate_detection)
        if license_plate_detection and len(license_plate_detection[0].boxes.data.tolist())> 0:
            detections = np.array([d[:4] for d in license_plate_detection[0].boxes.data.tolist()])
            print('detections:', detections)
            tracked_obj = mot_tracker.update(detections) 
            print("Tracked objects:", tracked_obj)

            for  license_plate, track_id in zip(license_plate_detection[0].boxes.data.tolist(),tracked_obj):
                print(license_plate) 
                x1, y1, x2, y2, score, class_id, _ = license_plate

                # license plate crop XD
                if track_id is not None:
                    plate_crop = frame[int(y1): int(y2), int(x1): int(x2)]

            
                    # process license plate. gotta fix this for visuals
                    plate_crop_gray = cv2.cvtColor(plate_crop, cv2.COLOR_BGR2GRAY)
                    plate_crop_thresh_inv = cv2.adaptiveThreshold(plate_crop_gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 11, 13)

                    # find contours in threshold
                    
                    contours, hierarchy = cv2.findContours(plate_crop_thresh_inv, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
                    # saving in folder output_license 


                    char_box =[]
                    min_char_area = 300
                    for contour in contours:
                        x, y, w, h = cv2.boundingRect(contour)
                        # print("printing contours",x, y, w, h)
                        if w * h > min_char_area:
                            char_box.append((x, y, w, h))
                            cv2.rectangle(frame, (x + int(x1), y + int(y1)), (x + int(x1) + w, y + int(y1) + h), (0, 255, 0), 2)

                    for char_idx, (x, y, w, h) in enumerate(char_box):
                        char_image = plate_crop_thresh_inv[y:y+h, x:x+w]
                        if char_image.size > 0:  # Check if the image is not empty
                            counter = counter + 1
                            output_filename = os.path.join(output_dir, f'char_{counter}.jpg')
                            cv2.imwrite(output_filename, char_image)
                    
                        license_frame = license_plate_detection[0].plot() # adding frames

                        cv2.imshow("License plate", license_frame) #License plate


        if cv2.waitKey(1) & 0xFF == ord("q"): 
            break
    else:
        break

cap.release()
cv2.destroyAllWindows()